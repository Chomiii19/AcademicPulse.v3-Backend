// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  surname String
  firstname String
  middlename String?
  extension String?
  role Int @default(3) // 1-owner, 2-admin, 3-user
  email String @unique
  phoneNumber String @unique
  password String
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownedSchool School? @relation("SchoolOwner")

  schoolId String?
  school School? @relation("SchoolUsers", fields: [schoolId], references: [schoolId]) 

  @@index([email])
  @@map("users")
  ProfilePictures ProfilePictures[]
}

model School {
  id Int @id @default(autoincrement())
  schoolId String? @unique
  name String
  address String
  email String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownerEmail String @unique
  owner User @relation("SchoolOwner", fields: [ownerEmail], references: [email])
  
  users User[] @relation("SchoolUsers")
  students Student[]
  schoolLog SchoolLog[]

  @@index([schoolId])
  @@map("schools")
}

model Student {
  id Int @default(autoincrement())
  studentId String @id @unique
  schoolId String
  surname String
  firstname String
  middlename String?
  extension String?
  course String
  yearLevel Int
  isValidated Boolean @default(false)
  inSchool Boolean @default(false)
  email String? @unique
  validatedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  school School @relation(fields: [schoolId], references: [schoolId], onDelete: Cascade)
  schoolLogs SchoolLog[]


  @@index([schoolId])
  @@map("students")
}

model SchoolLog {
  id Int @id @default(autoincrement())
  studentId String
  schoolId String
  timestamp DateTime @default(now())
  type Type

  student Student @relation(fields: [studentId], references: [studentId], onDelete: Cascade)
  school School @relation(fields: [schoolId], references: [schoolId], onDelete: Cascade)

  @@index([studentId])
  @@index([schoolId])
  @@index([schoolId, timestamp])
  @@map("schoollogs")
}

model ProfilePictures{
  id Int @id @default(autoincrement())
  userId Int
  url String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 

  @@map("profilepictures")
}

enum Type {
  entry
  exit
}
